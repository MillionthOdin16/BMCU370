name: Build Firmware

"on":
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allow manual triggering

# Prevent multiple concurrent release builds
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel release builds

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog generation
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: |
          ~/.platformio/.cache
          ~/.platformio/packages
          ~/.platformio/platforms
        key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-pio-
          
    - name: Cache build directory
      uses: actions/cache@v4
      with:
        path: .pio/build
        key: ${{ runner.os }}-pio-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-pio-build-
        
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
        
    - name: Generate release changelog
      id: release_changelog
      run: |
        # Find the previous tag for changelog comparison
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 $CURRENT_TAG^ 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          # No previous tag found, use initial commit
          PREVIOUS_REF=$(git rev-list --max-parents=0 HEAD)
          CHANGELOG_TITLE="Changes since initial release"
        else
          PREVIOUS_REF="$PREVIOUS_TAG"
          CHANGELOG_TITLE="Changes since $PREVIOUS_TAG"
        fi
        
        echo "previous_ref=${PREVIOUS_REF}" >> $GITHUB_OUTPUT
        echo "changelog_title=${CHANGELOG_TITLE}" >> $GITHUB_OUTPUT
        
        # Generate detailed changelog for release
        CHANGELOG_FILE="/tmp/release_changelog.md"
        echo "## $CHANGELOG_TITLE" > $CHANGELOG_FILE
        echo "" >> $CHANGELOG_FILE
        
        # Get commit log since previous tag
        if git rev-list --count ${PREVIOUS_REF}..HEAD > /dev/null 2>&1; then
          COMMIT_COUNT=$(git rev-list --count ${PREVIOUS_REF}..HEAD)
          if [ "$COMMIT_COUNT" -gt 0 ]; then
            echo "### 📝 Commits ($COMMIT_COUNT)" >> $CHANGELOG_FILE
            echo "" >> $CHANGELOG_FILE
            git log --oneline --reverse ${PREVIOUS_REF}..HEAD | sed 's/^/- /' >> $CHANGELOG_FILE
            echo "" >> $CHANGELOG_FILE
            
            echo "### 📂 File Changes" >> $CHANGELOG_FILE
            echo "" >> $CHANGELOG_FILE
            git diff --name-status ${PREVIOUS_REF}..HEAD | while read status file; do
              case $status in
                A) echo "- **Added:** $file" >> $CHANGELOG_FILE ;;
                M) echo "- **Modified:** $file" >> $CHANGELOG_FILE ;;
                D) echo "- **Deleted:** $file" >> $CHANGELOG_FILE ;;
                R*) echo "- **Renamed:** $file" >> $CHANGELOG_FILE ;;
                *) echo "- **Changed:** $file" >> $CHANGELOG_FILE ;;
              esac
            done
            echo "" >> $CHANGELOG_FILE
          else
            echo "No changes since $PREVIOUS_REF" >> $CHANGELOG_FILE
          fi
        else
          echo "Initial release" >> $CHANGELOG_FILE
        fi
        
        echo "changelog_file=$CHANGELOG_FILE" >> $GITHUB_OUTPUT
        
    - name: Build firmware
      run: |
        echo "Building firmware for release ${{ steps.get_version.outputs.version }}..."
        pio run
        
    - name: Get version and build metadata
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is_tag=true" >> $GITHUB_OUTPUT
        else
          VERSION="dev-$(date +%Y%m%d-%H%M%S)"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is_tag=false" >> $GITHUB_OUTPUT
        fi
        
        # Build metadata
        echo "build_date=$(date -u +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT
        echo "commit_short=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
        echo "platform=ch32v203c8t6" >> $GITHUB_OUTPUT
        echo "arch=riscv32" >> $GITHUB_OUTPUT
        
    - name: Prepare firmware artifacts
      run: |
        # Create release directory with organized structure
        mkdir -p firmware-release
        
        # Define artifact naming variables
        PLATFORM="${{ steps.get_version.outputs.platform }}"
        ARCH="${{ steps.get_version.outputs.arch }}"  
        VERSION="${{ steps.get_version.outputs.version }}"
        BUILD_DATE="${{ steps.get_version.outputs.build_date }}"
        COMMIT_SHORT="${{ steps.get_version.outputs.commit_short }}"
        
        # Copy firmware files with proper naming convention
        # Format: bmcu370-firmware_<version>_<platform>-<arch>.<ext>
        cp .pio/build/genericCH32V203C8T6/firmware.bin "firmware-release/bmcu370-firmware_${VERSION}_${PLATFORM}-${ARCH}.bin"
        cp .pio/build/genericCH32V203C8T6/firmware.elf "firmware-release/bmcu370-firmware_${VERSION}_${PLATFORM}-${ARCH}.elf"
        
        # Copy release changelog
        cp ${{ steps.release_changelog.outputs.changelog_file }} "firmware-release/RELEASE-CHANGELOG-${VERSION}.md"
        
        # Create comprehensive build info file
        cat > firmware-release/BUILD-INFO.txt << EOF
        BMCU370 Firmware Build Information
        ===================================
        
        Version: ${VERSION}
        Platform: ${PLATFORM^^} (${ARCH^^})
        Commit: ${COMMIT_SHORT} (${GITHUB_SHA})
        Build Date: ${BUILD_DATE} UTC
        PlatformIO Version: $(pio --version)
        
        Hardware Specifications:
        - Target MCU: CH32V203C8T6 
        - Architecture: RISC-V 32-bit
        - Clock Speed: 144MHz
        - Framework: Arduino
        
        Firmware Configuration:
        - AMS Firmware Version: 00.00.06.49
        - AMS Lite Firmware Version: 00.01.02.03
        - BambuBus Protocol Version: 5
        
        Release Artifacts:
        - bmcu370-firmware_${VERSION}_${PLATFORM}-${ARCH}.bin - Main firmware binary for flashing
        - bmcu370-firmware_${VERSION}_${PLATFORM}-${ARCH}.elf - ELF debug symbols and metadata  
        - BUILD-INFO.txt - This build information and metadata file
        - RELEASE-CHANGELOG-${VERSION}.md - Detailed changelog for this release
        
        Installation Instructions:
        1. Use a compatible CH32V programmer (WCH-Link recommended)
        2. Flash the .bin file to address 0x08000000
        3. Reset the device to start the new firmware
        
        Compatibility:
        - Bambu Lab X1/X1C series printers
        - Bambu Lab A1/A1 mini series printers  
        - Bambu Lab P1P/P1S series printers
        
        For detailed documentation and troubleshooting:
        https://github.com/MillionthOdin16/BMCU370
        EOF
        
        # Create SHA256 checksums for verification
        cd firmware-release
        sha256sum *.bin *.elf > SHA256SUMS.txt
        cd ..
        
    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bmcu370-firmware_${{ steps.get_version.outputs.version }}_${{ steps.get_version.outputs.platform }}-${{ steps.get_version.outputs.arch }}
        path: firmware-release/
        retention-days: 90
        compression-level: 6
        
    - name: Create GitHub Release and Upload Assets
      if: steps.get_version.outputs.is_tag == 'true'
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: BMCU370 Firmware ${{ steps.get_version.outputs.version }}
        body: |
          ## BMCU370 Firmware Release ${{ steps.get_version.outputs.version }}
          
          **Platform:** CH32V203C8T6 (RISC-V 32-bit, 144MHz)  
          **Build:** ${{ steps.get_version.outputs.commit_short }} • ${{ steps.get_version.outputs.build_date }} UTC
          
          ${{ steps.release_changelog.outputs.changelog_title }}
          
          ### 🚀 Features
          - Complete AMS and AMS Lite compatibility
          - BambuBus protocol v5 support with CRC validation
          - Multi-channel filament management (configurable LED counts)
          - RGB LED status indicators with smooth transitions
          - Flash-based configuration storage with wear leveling
          - Advanced Hall sensor integration (AS5600) with calibration
          
          ### 📋 Firmware Information  
          - **AMS Firmware Version**: 00.00.06.49
          - **AMS Lite Firmware Version**: 00.01.02.03
          - **BambuBus Protocol Version**: 5
          - **Hardware Target**: CH32V203C8T6 (RISC-V)
          - **Build Commit**: ${{ github.sha }}
          
          ### 📦 Release Artifacts
          - `bmcu370-firmware_${{ steps.get_version.outputs.version }}_${{ steps.get_version.outputs.platform }}-${{ steps.get_version.outputs.arch }}.bin` - Main firmware binary
          - `bmcu370-firmware_${{ steps.get_version.outputs.version }}_${{ steps.get_version.outputs.platform }}-${{ steps.get_version.outputs.arch }}.elf` - Debug symbols
          - `BUILD-INFO.txt` - Complete build information and metadata
          - `RELEASE-CHANGELOG-${{ steps.get_version.outputs.version }}.md` - Detailed changelog for this release
          - `SHA256SUMS.txt` - Checksums for artifact verification
          
          ### 🔧 Installation
          1. Download the `.bin` firmware file
          2. Connect CH32V programmer (WCH-Link recommended)
          3. Flash to address `0x08000000` using WCH-LinkUtility or compatible tool
          4. Reset device to boot new firmware
          
          ### ✅ Compatibility  
          - Bambu Lab X1/X1C series printers
          - Bambu Lab A1/A1 mini series printers
          - Bambu Lab P1P/P1S series printers
          
          **⚠️ Note:** Always verify checksums before flashing firmware to ensure integrity.
          
          For detailed setup instructions, troubleshooting, and development information, see the [project documentation](https://github.com/MillionthOdin16/BMCU370).
        draft: false
        prerelease: false
        files: |
          firmware-release/bmcu370-firmware_${{ steps.get_version.outputs.version }}_${{ steps.get_version.outputs.platform }}-${{ steps.get_version.outputs.arch }}.bin
          firmware-release/bmcu370-firmware_${{ steps.get_version.outputs.version }}_${{ steps.get_version.outputs.platform }}-${{ steps.get_version.outputs.arch }}.elf
          firmware-release/BUILD-INFO.txt
          firmware-release/RELEASE-CHANGELOG-${{ steps.get_version.outputs.version }}.md
          firmware-release/SHA256SUMS.txt